`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2020/08/02 12:57:28
// Design Name: 
// Module Name: EFIT
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module EFIT(
    clk,
    rst_n,
    qspi_d0,
    qspi_d1,
    qspi_d2,
    qspi_d3,
    I_qspi_cs,
    I_qspi_clk,
    TMDS_Tx_Clk_N,//HDMI发送数据 DN 路时钟
    TMDS_Tx_Clk_P,//HDMI发送数据 DP 路时钟
    TMDS_Tx_Data_N,//HDMI发送数据 DN 口
    TMDS_Tx_Data_P//HDMI发送数据 DP 口
    );

    input   clk;//FPGA时钟
    input   rst_n;
    input   qspi_d0;
    input   qspi_d1;
    input   qspi_d2;
    input   qspi_d3;
    input   I_qspi_cs;
    input   I_qspi_clk;//esp32提供的时钟,用于QSPI通信

    output TMDS_Tx_Clk_N;
    output TMDS_Tx_Clk_P;
    output [2:0]TMDS_Tx_Data_N;
    output [2:0]TMDS_Tx_Data_P;
    
    wire clk_system;
    wire [23:0]RGB_Data;
    wire [23:0]RGB_In;
    wire RGB_HSync;
    wire RGB_VSync;
    wire RGB_VDE;
    wire [11:0]Set_X;
    wire [11:0]Set_Y;
    
    wire [31:0] addr_32;
    wire [7:0]  o_data;
//    wire [7:0]  i_data;
    wire o_valid;
    
    
    wire RAM_en;//1:esp32发送完所有数据
//    wire enb;//RAM B 端口使能
//    assign enb=1;

    //QSPI交互模块
    qspi_slave u_qspi_slave(
        .I_qspi_clk  (I_qspi_clk)  , 
        .I_qspi_cs   (I_qspi_cs)  , 
        .IO_qspi_io0 (qspi_d0)  ,
        .IO_qspi_io1 (qspi_d1)  ,
        .IO_qspi_io2 (qspi_d2)  , 
        .IO_qspi_io3 (qspi_d3)  , 
        .o_addr      (addr_32)    ,
        .o_data      (o_data)  ,//RAM数据写入端
        .o_valid     (o_valid), //RAM写使能端
        .RAM_en(RAM_en)
    );
    
    
    wire [14:0] addrb;
    wire [23:0] dinb;
    wire [7:0] doutb;
    //RAM
    blk_mem_gen_0 u_blk_mem_gen_0 (
      .clka(I_qspi_clk),    // input wire clka
      .wea(o_valid),      // input wire [0 : 0] wea RAM写使能端
      .addra(addr_32[14:0]),  // input wire [14 : 0] addra
      .dina(o_data),    // input wire [7 : 0] dina
      .clkb(clk_system),    // input wire clkb B端口数据读取要和HDMI Driver保持同步
      .addrb(addrb),  // input wire [14 : 0] addrb
      .doutb(doutb)  // output wire [7 : 0] doutb 输出给数据处理模块的数据
);

    //数据处理模块，提取图片像素信息并返回给HDMI Driver
    get_data_from_esp32 get_data_from_esp32_0(
         .clk(clk_system),
         .rst_n(rst_n),
         .addr(addrb),  //output addr
         .data_in(doutb),//读取RAM数据(doutb)
         .data_out(dinb),//发送图片数据给HDMI Driver
         .Set_X(Set_X),
         .Set_Y(Set_Y),
         .RAM_en(RAM_en)
    );
    
     //RGBToDvi instantiation
    rgb2dvi_0 rgb2dvi(
        .TMDS_Clk_p(TMDS_Tx_Clk_P),
        .TMDS_Clk_n(TMDS_Tx_Clk_N),
        .TMDS_Data_p(TMDS_Tx_Data_P),
        .TMDS_Data_n(TMDS_Tx_Data_N),
        .aRst_n(1),
        .vid_pData(RGB_Data),
        .vid_pVDE(RGB_VDE),
        .vid_pHSync(RGB_HSync),
        .vid_pVSync(RGB_VSync),
        .PixelClk(clk_system));
    
    //生成HDMI驱动时钟
        clk_wiz_0 clk_10(.clk_out1(clk_system),.clk_in1(clk),.resetn(rst_n));
    //HDMI驱动
        Driver_HDMI_0 Driver_HDMI0(
            .clk(clk_system),        //Clock148.5MHZ
            .Rst(rst_n),                 //Reset signal, low reset
            .Video_Mode(0),          //Video format, 0 is 1920*1080@60Hz, 1 is 1280*720@60Hz
            .RGB_In(dinb),         //Input data generated by Video_Generator
            .RGB_Data(RGB_Data),     //Output Data (HDMI data)
            .RGB_HSync(RGB_HSync),   //Line signal
            .RGB_VSync(RGB_VSync),   //Field signal
            .RGB_VDE(RGB_VDE),       //Data valid signal
            .Set_X(Set_X),           //Image coordinate X
            .Set_Y(Set_Y)            //Image coordinate Y
            );
    endmodule
